/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AuditLogsService } from "../auditLogs.service";
import { AuditLogsCreateInput } from "./AuditLogsCreateInput";
import { AuditLogs } from "./AuditLogs";
import { AuditLogsFindManyArgs } from "./AuditLogsFindManyArgs";
import { AuditLogsWhereUniqueInput } from "./AuditLogsWhereUniqueInput";
import { AuditLogsUpdateInput } from "./AuditLogsUpdateInput";

export class AuditLogsControllerBase {
  constructor(protected readonly service: AuditLogsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AuditLogs })
  async createAuditLogs(
    @common.Body() data: AuditLogsCreateInput
  ): Promise<AuditLogs> {
    return await this.service.createAuditLogs({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        details: true,
        event: true,
        timestamp: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AuditLogs] })
  @ApiNestedQuery(AuditLogsFindManyArgs)
  async auditLogsItems(@common.Req() request: Request): Promise<AuditLogs[]> {
    const args = plainToClass(AuditLogsFindManyArgs, request.query);
    return this.service.auditLogsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        details: true,
        event: true,
        timestamp: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AuditLogs })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async auditLogs(
    @common.Param() params: AuditLogsWhereUniqueInput
  ): Promise<AuditLogs | null> {
    const result = await this.service.auditLogs({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        details: true,
        event: true,
        timestamp: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AuditLogs })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAuditLogs(
    @common.Param() params: AuditLogsWhereUniqueInput,
    @common.Body() data: AuditLogsUpdateInput
  ): Promise<AuditLogs | null> {
    try {
      return await this.service.updateAuditLogs({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          details: true,
          event: true,
          timestamp: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AuditLogs })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAuditLogs(
    @common.Param() params: AuditLogsWhereUniqueInput
  ): Promise<AuditLogs | null> {
    try {
      return await this.service.deleteAuditLogs({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          details: true,
          event: true,
          timestamp: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
