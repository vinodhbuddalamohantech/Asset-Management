/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AuditLogs as PrismaAuditLogs,
  User as PrismaUser,
} from "@prisma/client";

export class AuditLogsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AuditLogsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.auditLogs.count(args);
  }

  async auditLogsItems(
    args: Prisma.AuditLogsFindManyArgs
  ): Promise<PrismaAuditLogs[]> {
    return this.prisma.auditLogs.findMany(args);
  }
  async auditLogs(
    args: Prisma.AuditLogsFindUniqueArgs
  ): Promise<PrismaAuditLogs | null> {
    return this.prisma.auditLogs.findUnique(args);
  }
  async createAuditLogs(
    args: Prisma.AuditLogsCreateArgs
  ): Promise<PrismaAuditLogs> {
    return this.prisma.auditLogs.create(args);
  }
  async updateAuditLogs(
    args: Prisma.AuditLogsUpdateArgs
  ): Promise<PrismaAuditLogs> {
    return this.prisma.auditLogs.update(args);
  }
  async deleteAuditLogs(
    args: Prisma.AuditLogsDeleteArgs
  ): Promise<PrismaAuditLogs> {
    return this.prisma.auditLogs.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.auditLogs
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
