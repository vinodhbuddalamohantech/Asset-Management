/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AuditLogs } from "./AuditLogs";
import { AuditLogsCountArgs } from "./AuditLogsCountArgs";
import { AuditLogsFindManyArgs } from "./AuditLogsFindManyArgs";
import { AuditLogsFindUniqueArgs } from "./AuditLogsFindUniqueArgs";
import { CreateAuditLogsArgs } from "./CreateAuditLogsArgs";
import { UpdateAuditLogsArgs } from "./UpdateAuditLogsArgs";
import { DeleteAuditLogsArgs } from "./DeleteAuditLogsArgs";
import { User } from "../../user/base/User";
import { AuditLogsService } from "../auditLogs.service";
@graphql.Resolver(() => AuditLogs)
export class AuditLogsResolverBase {
  constructor(protected readonly service: AuditLogsService) {}

  async _auditLogsItemsMeta(
    @graphql.Args() args: AuditLogsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AuditLogs])
  async auditLogsItems(
    @graphql.Args() args: AuditLogsFindManyArgs
  ): Promise<AuditLogs[]> {
    return this.service.auditLogsItems(args);
  }

  @graphql.Query(() => AuditLogs, { nullable: true })
  async auditLogs(
    @graphql.Args() args: AuditLogsFindUniqueArgs
  ): Promise<AuditLogs | null> {
    const result = await this.service.auditLogs(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AuditLogs)
  async createAuditLogs(
    @graphql.Args() args: CreateAuditLogsArgs
  ): Promise<AuditLogs> {
    return await this.service.createAuditLogs({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AuditLogs)
  async updateAuditLogs(
    @graphql.Args() args: UpdateAuditLogsArgs
  ): Promise<AuditLogs | null> {
    try {
      return await this.service.updateAuditLogs({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AuditLogs)
  async deleteAuditLogs(
    @graphql.Args() args: DeleteAuditLogsArgs
  ): Promise<AuditLogs | null> {
    try {
      return await this.service.deleteAuditLogs(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: AuditLogs): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
