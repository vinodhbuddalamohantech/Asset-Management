/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DepartmentsService } from "../departments.service";
import { DepartmentsCreateInput } from "./DepartmentsCreateInput";
import { Departments } from "./Departments";
import { DepartmentsFindManyArgs } from "./DepartmentsFindManyArgs";
import { DepartmentsWhereUniqueInput } from "./DepartmentsWhereUniqueInput";
import { DepartmentsUpdateInput } from "./DepartmentsUpdateInput";
import { AssetsFindManyArgs } from "../../assets/base/AssetsFindManyArgs";
import { Assets } from "../../assets/base/Assets";
import { AssetsWhereUniqueInput } from "../../assets/base/AssetsWhereUniqueInput";

export class DepartmentsControllerBase {
  constructor(protected readonly service: DepartmentsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Departments })
  async createDepartments(
    @common.Body() data: DepartmentsCreateInput
  ): Promise<Departments> {
    return await this.service.createDepartments({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Departments] })
  @ApiNestedQuery(DepartmentsFindManyArgs)
  async departmentsItems(
    @common.Req() request: Request
  ): Promise<Departments[]> {
    const args = plainToClass(DepartmentsFindManyArgs, request.query);
    return this.service.departmentsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Departments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async departments(
    @common.Param() params: DepartmentsWhereUniqueInput
  ): Promise<Departments | null> {
    const result = await this.service.departments({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Departments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDepartments(
    @common.Param() params: DepartmentsWhereUniqueInput,
    @common.Body() data: DepartmentsUpdateInput
  ): Promise<Departments | null> {
    try {
      return await this.service.updateDepartments({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Departments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDepartments(
    @common.Param() params: DepartmentsWhereUniqueInput
  ): Promise<Departments | null> {
    try {
      return await this.service.deleteDepartments({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/assetsItems")
  @ApiNestedQuery(AssetsFindManyArgs)
  async findAssetsItems(
    @common.Req() request: Request,
    @common.Param() params: DepartmentsWhereUniqueInput
  ): Promise<Assets[]> {
    const query = plainToClass(AssetsFindManyArgs, request.query);
    const results = await this.service.findAssetsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        typeField: true,
        status: true,

        department: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/assetsItems")
  async connectAssetsItems(
    @common.Param() params: DepartmentsWhereUniqueInput,
    @common.Body() body: AssetsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assetsItems: {
        connect: body,
      },
    };
    await this.service.updateDepartments({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/assetsItems")
  async updateAssetsItems(
    @common.Param() params: DepartmentsWhereUniqueInput,
    @common.Body() body: AssetsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assetsItems: {
        set: body,
      },
    };
    await this.service.updateDepartments({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/assetsItems")
  async disconnectAssetsItems(
    @common.Param() params: DepartmentsWhereUniqueInput,
    @common.Body() body: AssetsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assetsItems: {
        disconnect: body,
      },
    };
    await this.service.updateDepartments({
      where: params,
      data,
      select: { id: true },
    });
  }
}
