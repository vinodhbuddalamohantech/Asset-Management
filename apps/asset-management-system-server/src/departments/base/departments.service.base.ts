/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Departments as PrismaDepartments,
  Assets as PrismaAssets,
} from "@prisma/client";

export class DepartmentsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DepartmentsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.departments.count(args);
  }

  async departmentsItems(
    args: Prisma.DepartmentsFindManyArgs
  ): Promise<PrismaDepartments[]> {
    return this.prisma.departments.findMany(args);
  }
  async departments(
    args: Prisma.DepartmentsFindUniqueArgs
  ): Promise<PrismaDepartments | null> {
    return this.prisma.departments.findUnique(args);
  }
  async createDepartments(
    args: Prisma.DepartmentsCreateArgs
  ): Promise<PrismaDepartments> {
    return this.prisma.departments.create(args);
  }
  async updateDepartments(
    args: Prisma.DepartmentsUpdateArgs
  ): Promise<PrismaDepartments> {
    return this.prisma.departments.update(args);
  }
  async deleteDepartments(
    args: Prisma.DepartmentsDeleteArgs
  ): Promise<PrismaDepartments> {
    return this.prisma.departments.delete(args);
  }

  async findAssetsItems(
    parentId: string,
    args: Prisma.AssetsFindManyArgs
  ): Promise<PrismaAssets[]> {
    return this.prisma.departments
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .assetsItems(args);
  }
}
