/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssetsService } from "../assets.service";
import { AssetsCreateInput } from "./AssetsCreateInput";
import { Assets } from "./Assets";
import { AssetsFindManyArgs } from "./AssetsFindManyArgs";
import { AssetsWhereUniqueInput } from "./AssetsWhereUniqueInput";
import { AssetsUpdateInput } from "./AssetsUpdateInput";
import { AssignmentsFindManyArgs } from "../../assignments/base/AssignmentsFindManyArgs";
import { Assignments } from "../../assignments/base/Assignments";
import { AssignmentsWhereUniqueInput } from "../../assignments/base/AssignmentsWhereUniqueInput";

export class AssetsControllerBase {
  constructor(protected readonly service: AssetsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Assets })
  async createAssets(@common.Body() data: AssetsCreateInput): Promise<Assets> {
    return await this.service.createAssets({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        typeField: true,
        status: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Assets] })
  @ApiNestedQuery(AssetsFindManyArgs)
  async assetsItems(@common.Req() request: Request): Promise<Assets[]> {
    const args = plainToClass(AssetsFindManyArgs, request.query);
    return this.service.assetsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        typeField: true,
        status: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Assets })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assets(
    @common.Param() params: AssetsWhereUniqueInput
  ): Promise<Assets | null> {
    const result = await this.service.assets({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        typeField: true,
        status: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Assets })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssets(
    @common.Param() params: AssetsWhereUniqueInput,
    @common.Body() data: AssetsUpdateInput
  ): Promise<Assets | null> {
    try {
      return await this.service.updateAssets({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          typeField: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Assets })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssets(
    @common.Param() params: AssetsWhereUniqueInput
  ): Promise<Assets | null> {
    try {
      return await this.service.deleteAssets({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          typeField: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/assignmentsItems")
  @ApiNestedQuery(AssignmentsFindManyArgs)
  async findAssignmentsItems(
    @common.Req() request: Request,
    @common.Param() params: AssetsWhereUniqueInput
  ): Promise<Assignments[]> {
    const query = plainToClass(AssignmentsFindManyArgs, request.query);
    const results = await this.service.findAssignmentsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        assignmentDate: true,
        returnDate: true,

        user: {
          select: {
            id: true,
          },
        },

        asset: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/assignmentsItems")
  async connectAssignmentsItems(
    @common.Param() params: AssetsWhereUniqueInput,
    @common.Body() body: AssignmentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assignmentsItems: {
        connect: body,
      },
    };
    await this.service.updateAssets({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/assignmentsItems")
  async updateAssignmentsItems(
    @common.Param() params: AssetsWhereUniqueInput,
    @common.Body() body: AssignmentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assignmentsItems: {
        set: body,
      },
    };
    await this.service.updateAssets({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/assignmentsItems")
  async disconnectAssignmentsItems(
    @common.Param() params: AssetsWhereUniqueInput,
    @common.Body() body: AssignmentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assignmentsItems: {
        disconnect: body,
      },
    };
    await this.service.updateAssets({
      where: params,
      data,
      select: { id: true },
    });
  }
}
