/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Assets } from "./Assets";
import { AssetsCountArgs } from "./AssetsCountArgs";
import { AssetsFindManyArgs } from "./AssetsFindManyArgs";
import { AssetsFindUniqueArgs } from "./AssetsFindUniqueArgs";
import { CreateAssetsArgs } from "./CreateAssetsArgs";
import { UpdateAssetsArgs } from "./UpdateAssetsArgs";
import { DeleteAssetsArgs } from "./DeleteAssetsArgs";
import { AssignmentsFindManyArgs } from "../../assignments/base/AssignmentsFindManyArgs";
import { Assignments } from "../../assignments/base/Assignments";
import { AssetsService } from "../assets.service";
@graphql.Resolver(() => Assets)
export class AssetsResolverBase {
  constructor(protected readonly service: AssetsService) {}

  async _assetsItemsMeta(
    @graphql.Args() args: AssetsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Assets])
  async assetsItems(
    @graphql.Args() args: AssetsFindManyArgs
  ): Promise<Assets[]> {
    return this.service.assetsItems(args);
  }

  @graphql.Query(() => Assets, { nullable: true })
  async assets(
    @graphql.Args() args: AssetsFindUniqueArgs
  ): Promise<Assets | null> {
    const result = await this.service.assets(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Assets)
  async createAssets(@graphql.Args() args: CreateAssetsArgs): Promise<Assets> {
    return await this.service.createAssets({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Assets)
  async updateAssets(
    @graphql.Args() args: UpdateAssetsArgs
  ): Promise<Assets | null> {
    try {
      return await this.service.updateAssets({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Assets)
  async deleteAssets(
    @graphql.Args() args: DeleteAssetsArgs
  ): Promise<Assets | null> {
    try {
      return await this.service.deleteAssets(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Assignments], { name: "assignmentsItems" })
  async findAssignmentsItems(
    @graphql.Parent() parent: Assets,
    @graphql.Args() args: AssignmentsFindManyArgs
  ): Promise<Assignments[]> {
    const results = await this.service.findAssignmentsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
