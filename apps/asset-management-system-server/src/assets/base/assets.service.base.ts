/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Assets as PrismaAssets,
  Assignments as PrismaAssignments,
  Departments as PrismaDepartments,
} from "@prisma/client";

export class AssetsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AssetsCountArgs, "select">): Promise<number> {
    return this.prisma.assets.count(args);
  }

  async assetsItems(args: Prisma.AssetsFindManyArgs): Promise<PrismaAssets[]> {
    return this.prisma.assets.findMany(args);
  }
  async assets(
    args: Prisma.AssetsFindUniqueArgs
  ): Promise<PrismaAssets | null> {
    return this.prisma.assets.findUnique(args);
  }
  async createAssets(args: Prisma.AssetsCreateArgs): Promise<PrismaAssets> {
    return this.prisma.assets.create(args);
  }
  async updateAssets(args: Prisma.AssetsUpdateArgs): Promise<PrismaAssets> {
    return this.prisma.assets.update(args);
  }
  async deleteAssets(args: Prisma.AssetsDeleteArgs): Promise<PrismaAssets> {
    return this.prisma.assets.delete(args);
  }

  async findAssignmentsItems(
    parentId: string,
    args: Prisma.AssignmentsFindManyArgs
  ): Promise<PrismaAssignments[]> {
    return this.prisma.assets
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .assignmentsItems(args);
  }

  async getDepartment(parentId: string): Promise<PrismaDepartments | null> {
    return this.prisma.assets
      .findUnique({
        where: { id: parentId },
      })
      .department();
  }
}
