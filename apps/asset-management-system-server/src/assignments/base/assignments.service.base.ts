/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Assignments as PrismaAssignments,
  User as PrismaUser,
  Assets as PrismaAssets,
} from "@prisma/client";

export class AssignmentsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AssignmentsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.assignments.count(args);
  }

  async assignmentsItems(
    args: Prisma.AssignmentsFindManyArgs
  ): Promise<PrismaAssignments[]> {
    return this.prisma.assignments.findMany(args);
  }
  async assignments(
    args: Prisma.AssignmentsFindUniqueArgs
  ): Promise<PrismaAssignments | null> {
    return this.prisma.assignments.findUnique(args);
  }
  async createAssignments(
    args: Prisma.AssignmentsCreateArgs
  ): Promise<PrismaAssignments> {
    return this.prisma.assignments.create(args);
  }
  async updateAssignments(
    args: Prisma.AssignmentsUpdateArgs
  ): Promise<PrismaAssignments> {
    return this.prisma.assignments.update(args);
  }
  async deleteAssignments(
    args: Prisma.AssignmentsDeleteArgs
  ): Promise<PrismaAssignments> {
    return this.prisma.assignments.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.assignments
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getAsset(parentId: string): Promise<PrismaAssets | null> {
    return this.prisma.assignments
      .findUnique({
        where: { id: parentId },
      })
      .asset();
  }
}
